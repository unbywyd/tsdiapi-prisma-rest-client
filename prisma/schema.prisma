generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(cuid())
  email       String?   @unique
  phoneNumber String    @unique
  password    String
  name        String?
  users       User[]    @relation("_AdminToUser")
}

model Brand {
  id   String @id @default(cuid())
  name String @unique

  items  Item[]
  models ModelSpecification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id      String  @id @default(cuid())
  name    String  @unique
  name_he String?
  name_ru String?

  productTypes ProductType[]

  order                 Int?                  @default(0)
  items                 Item[]
  recommendedProperties RecommendedProperty[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model City {
  id      String  @id @default(cuid())
  name    String  @unique
  name_he String?
  name_ru String?

  lat Float?
  lng Float?

  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])

  items Item[]
  users User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Contact {
  mainUserContact User?    @relation("MainUserContact")
  id              String   @id @default(cuid())
  name            String?
  photo           Media[]
  telegram        String?
  phoneNumber     String?
  hasWhatsapp     Boolean? @default(false)
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  items Item[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Country {
  id      String  @id @default(cuid())
  name    String  @unique
  name_he String?
  name_ru String?
  code    String?

  currencyId String?
  currency   Currency? @relation(fields: [currencyId], references: [id])

  phoneCode String?

  cities City[]
  users  User[]
  items  Item[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Currency {
  id   String @id @default(cuid())
  name String @unique
  code String @unique

  countries Country[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model DbOption {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(cuid())
  name      String    @unique
  value     Json
}

model Favorite {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  itemId    String
  item      Item      @relation(fields: [itemId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Interest {
  id String @id @default(cuid())

  messages Message[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  startMessage String?

  itemId String
  item   Item   @relation(fields: [itemId], references: [id])

  cancelledDate DateTime?
  isRead        Boolean?  @default(false)
  readAt        DateTime?

  isContactApproved Boolean?  @default(false)
  contactApprovedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Item {
  id          String @id @default(cuid())
  title       String // краткое описание товара
  description String // подробное описание товара

  isPublicContact Boolean? @default(false)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  tokenUsageLogs TokenUsageLog[]

  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  messages Message[]

  previewAddressName String?
  addressName        String?
  addressLat         Float?
  addressLng         Float?

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])

  conditionDescription String?

  modelId String?
  model   ModelSpecification? @relation(fields: [modelId], references: [id])

  productTypeId String
  productType   ProductType @relation(fields: [productTypeId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  mainPhotoId String? @unique

  media Media[]

  originalDescription String @default("") // оригинальное описание

  photoSourceDescription String?
  generatedDescription   String?

  spamScore Float? @default(0) // оценка спама

  price      Int?       @default(0)
  properties Property[]

  status         ItemStatus     @default(DRAFT)
  condition      ItemCondition?
  tags           Tag[]
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  questions      Question[]
  interests      Interest[]
  desiredTrade   DesiredTrade   @default(CHOCOLATE)
  desiredMessage String?
  sugarFree      Boolean?       @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  isDeleted      Boolean        @default(false)
  favorites      Favorite[]
  karma          Karma[]
  notifications  Notification[]

  reports Report[]

  viewLogs ItemViewLog[]
}

model ItemViewLog {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  itemId String
  item   Item   @relation(fields: [itemId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Karma {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  itemId    String?
  item      Item?     @relation(fields: [itemId], references: [id])
  message   String
  type      KarmaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Media {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(cuid())
  name      String?
  isPrivate Boolean   @default(false)
  format    String?
  type      MediaType @default(OTHER)
  width     Float?
  height    Float?
  mimetype  String?
  filesize  Float?
  url       String
  key       String?
  s3bucket  String?
  s3region  String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  messageId String?
  message   Message? @relation(fields: [messageId], references: [id])

  itemId String?
  item   Item?   @relation(fields: [itemId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  mediaId String?
  mediaBy Media?  @relation("_MediaToMedia", fields: [mediaId], references: [id])
  media   Media[] @relation("_MediaToMedia")
}

model Message {
  interestId String?
  interest   Interest? @relation(fields: [interestId], references: [id])
  id         String    @id @default(cuid())

  userId String
  user   User    @relation(fields: [userId], references: [id])
  text   String
  media  Media[]

  referenceItemId String
  referenceItem   Item   @relation(fields: [referenceItemId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ModelSpecification {
  id             String      @id @default(cuid())
  code           String      @unique
  productTypeId  String
  productType    ProductType @relation(fields: [productTypeId], references: [id])
  name           String
  description    String?
  description_he String?

  properties          Json?
  propertiesUpdatedAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  items Item[]

  @@index([code])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  message   String
  subject   String?
  itemId    String
  item      Item      @relation(fields: [itemId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductType {
  id         String               @id @default(cuid())
  name       String               @unique
  name_he    String?
  name_ru    String?
  items      Item[]
  categories Category[]
  models     ModelSpecification[]
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  deletedAt  DateTime?
}

model Property {
  id      String  @id @default(cuid())
  name    String  @unique
  name_he String?
  name_ru String?

  value  String
  itemId String
  item   Item   @relation(fields: [itemId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, itemId])
}

model Question {
  id         String         @id @default(cuid())
  question   String // текст вопроса
  answer     String? // ответ на вопрос
  itemId     String
  status     QuestionStatus @default(NEW)
  answeredAt DateTime?
  item       Item           @relation(fields: [itemId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?

  byUserId String
  byUser   User   @relation(fields: [byUserId], references: [id])
}

model RecommendedProperty {
  id         String   @id @default(cuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  name    String  @default("")
  name_he String?
  name_ru String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([categoryId, name])
}

model Report {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  itemId    String
  item      Item      @relation(fields: [itemId], references: [id])
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  resolvedAt     DateTime?
  resolveMessage String?

  rejectedAt    DateTime?
  rejectMessage String?

  status ReportStatus @default(NEW)
}

model Session {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(cuid())
  email       String?
  phoneNumber String?
  code        String
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  name_he String?
  name_ru String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  items Item[]
}

model TokenUsageLog {
  id     String  @id @default(cuid())
  userId String
  user   User    @relation(fields: [userId], references: [id])
  itemId String?
  item   Item?   @relation(fields: [itemId], references: [id])

  target       String?
  model        String?
  inputTokens  Float     @default(0)
  outputTokens Float     @default(0)
  totalTokens  Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Tsdiapi {
  id        Int       @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  version   Int
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  items         Item[]
  interests     Interest[]
  karma         Karma[]
  favorites     Favorite[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  reports       Report[]
  deletedAt     DateTime?
  isDeleted     Boolean        @default(false)

  role           Role            @default(USER)
  tokenUsageLogs TokenUsageLog[]

  contacts Contact[]
  media    Media[]

  mainContactId String?  @unique
  mainContact   Contact? @relation("MainUserContact", fields: [mainContactId], references: [id])

  name        String?
  addressName String?
  addressLat  Float?
  addressLng  Float?

  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  questions    Question[]
  messages     Message[]
  itemViewLogs ItemViewLog[]
  phoneNumber  String?       @unique
  adminId      String?
  admin        Admin?        @relation("_AdminToUser", fields: [adminId], references: [id])
}

enum DesiredTrade {
  CHOCOLATE
  ITEM
  OTHER
  MONEY
}

enum ItemCondition {
  NEW
  GOOD
  PERFECT
  REQUIRES_REPAIR
  DAMAGED
}

enum ItemStatus {
  DRAFT
  AVAILABLE
  SOLD
  IN_DELIVERY
}

enum KarmaType {
  REPORT
  SPAM
  INCORRECT_IMAGE
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

enum QuestionStatus {
  NEW
  ANSWERED
}

enum ReportStatus {
  NEW
  RESOLVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}
